package sk.upjs.kopr.TcpDownloadManager;

import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

public class KlientForm extends javax.swing.JFrame {

    private MyJFileChooser chooser;
    private String destinationPath = null;
    private String sourcePath = null;
    private Klient klient = null;
    private int pocetSoketov;
    
    public KlientForm() {
        initComponents();
        chooser = new MyJFileChooser();
        btnSelectDestinationFolder.addActionListener(chooser);
        progressBar.setVisible(false);
        btnPauseContinue.setVisible(false);
        nacitajcbb();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSelectDestinationFolder = new javax.swing.JButton();
        lblSelectedDestination = new javax.swing.JLabel();
        cbbFiles = new javax.swing.JComboBox();
        lblSelectFile = new javax.swing.JLabel();
        BtnDownload = new javax.swing.JButton();
        lblSocketCount = new javax.swing.JLabel();
        txtSocketCount = new javax.swing.JTextField();
        progressBar = new javax.swing.JProgressBar();
        btnPauseContinue = new javax.swing.JButton();
        lblProgress = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSelectDestinationFolder.setText("Select Destination Folder");
        btnSelectDestinationFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectDestinationFolderActionPerformed(evt);
            }
        });

        lblSelectedDestination.setText("There is no file selected");

        cbbFiles.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbFilesItemStateChanged(evt);
            }
        });

        lblSelectFile.setText("Select file to download");

        BtnDownload.setText("Download");
        BtnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDownloadActionPerformed(evt);
            }
        });

        lblSocketCount.setText("Socket count");

        txtSocketCount.setText("100");

        btnPauseContinue.setText("Pause");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnSelectDestinationFolder))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(lblSelectFile))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblSocketCount)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSelectedDestination, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbbFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSocketCount, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnPauseContinue)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BtnDownload))
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectFile))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectDestinationFolder)
                    .addComponent(lblSelectedDestination))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSocketCount)
                    .addComponent(txtSocketCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(lblProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnDownload)
                    .addComponent(btnPauseContinue))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectDestinationFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectDestinationFolderActionPerformed
        destinationPath = chooser.chooser.getSelectedFile().getAbsolutePath();
        lblSelectedDestination.setText(destinationPath);
    }//GEN-LAST:event_btnSelectDestinationFolderActionPerformed

    private void BtnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDownloadActionPerformed
        
        if(destinationPath == null){
            JOptionPane.showMessageDialog(this, "Musite vybrat priecinok, kde sa ma stiahnut zadany subor");
        }
        if(sourcePath == null || sourcePath.equals("Choose file")){
            JOptionPane.showMessageDialog(this, "Musite vybrat subor, ktory chcete stiahnut");
        }
        if(sourcePath != null && destinationPath != null){
            btnPauseContinue.setVisible(true);
            progressBar.setVisible(true);
            progressBar.setMinimum(0);
            progressBar.setMaximum(100);
            progressBar.setValue(0);
            lblProgress.setText("inicializuje sa spojenie so serverom");
            pocetSoketov = Integer.parseInt(txtSocketCount.getText());
            SwingWorker sw;
            sw = new SwingWorker<Void, Integer>() {
                
                @Override
                protected Void doInBackground() throws Exception {
                    klient = new Klient(sourcePath, destinationPath + "\\" + sourcePath, pocetSoketov);
                    return null;
                }

                @Override
                protected void done() {
                    lblProgress.setText("Spojenie je inicializovane");
                }
                
            };
            sw.execute();
        }
    }//GEN-LAST:event_BtnDownloadActionPerformed

    private void cbbFilesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbFilesItemStateChanged
        sourcePath = (String)cbbFiles.getSelectedItem();
        //System.out.println("source path selected: " + sourcePath);
    }//GEN-LAST:event_cbbFilesItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KlientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KlientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KlientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KlientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KlientForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnDownload;
    private javax.swing.JButton btnPauseContinue;
    private javax.swing.JButton btnSelectDestinationFolder;
    private javax.swing.JComboBox cbbFiles;
    private javax.swing.JLabel lblProgress;
    private javax.swing.JLabel lblSelectFile;
    private javax.swing.JLabel lblSelectedDestination;
    private javax.swing.JLabel lblSocketCount;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField txtSocketCount;
    // End of variables declaration//GEN-END:variables

    private void nacitajcbb() {
        File adresar = new File(".");
        File[] subory = adresar.listFiles();
        //System.out.println(Arrays.toString(subory));
        
        for (int i = 0; i < subory.length; i++) {
            if(subory[i].isDirectory()){
                continue;
            }if(subory[i].getName().equals("build.xml") 
                    || subory[i].getName().equals("manifest.mf") 
                    || subory[i].getName().equals(".gitignore") 
                    || subory[i].getName().equals("README.md") ){
                continue;
            }
            cbbFiles.addItem(subory[i].getName());
        }
    }
}
